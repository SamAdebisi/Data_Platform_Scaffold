version: "3.9"
services:
  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v24.1.7
    command: redpanda start --overprovisioned --smp 1 --memory 512M --reserve-memory 0M --node-id 0 --check=false --kafka-addr PLAINTEXT://0.0.0.0:9092,OUTSIDE://0.0.0.0:19092 --advertise-kafka-addr PLAINTEXT://redpanda:9092,OUTSIDE://localhost:19092
    ports: ["19092:19092","9644:9644"]
  minio:
    image: minio/minio:RELEASE.2025-01-11T06-21-60Z
    environment: {MINIO_ROOT_USER: "minio", MINIO_ROOT_PASSWORD: "minio123"}
    command: server /data --console-address ":9001"
    ports: ["9000:9000","9001:9001"]
    volumes: ["minio:/data"]
    healthcheck:
      test: ["CMD-SHELL","wget -qO- http://localhost:9000/minio/health/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 12
  create-buckets:
    image: minio/mc
    depends_on: [minio]
    entrypoint: ["/bin/sh","-c"]
    command: >
      "mc alias set local http://minio:9000 minio minio123 &&
       mc mb -p local/bronze || true &&
       mc mb -p local/silver || true &&
       mc mb -p local/gold || true"
  redis:
    image: redis:7
    ports: ["6379:6379"]
  postgres:
    image: postgres:16
    environment: {POSTGRES_USER: airflow, POSTGRES_PASSWORD: airflow, POSTGRES_DB: airflow}
    ports: ["5432:5432"]
  airflow:
    build: {context: ., dockerfile: docker/airflow/Dockerfile}
    environment:
      - KAFKA_BROKERS=redpanda:9092
      - KAFKA_TOPIC=txn.raw.v1
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=minio
      - S3_SECRET_KEY=minio123
      - BRONZE_BUCKET=bronze
      - AWS_ACCESS_KEY_ID=minio
      - AWS_SECRET_ACCESS_KEY=minio123
      - AWS_REGION=us-east-1
      - DUCKDB_S3_ENDPOINT=http://minio:9000
      - DUCKDB_S3_URL_STYLE=path
    healthcheck:
      test: ["CMD-SHELL","curl -fsS http://localhost:8080/health | grep -q healthy"]
      interval: 10s
      timeout: 5s
      retries: 12
    ports: ["8080:8080"]
    depends_on: [postgres, redis]
    volumes:
     - ./orchestration/airflow/dags:/opt/airflow/dags
     - ./orchestration/airflow/plugins:/opt/airflow/plugins
     - ./observability:/observability
     - ./transform:/project/transform
     - ./feature_store:/project/feature_store
     - ./compliance:/project/compliance
     - ./reverse_etl:/project/reverse_etl
     - ./streaming:/opt/airflow/streaming  
  dbt:
    build: {context: ., dockerfile: docker/dbt/Dockerfile}
    environment:
      - AWS_ACCESS_KEY_ID=minio
      - AWS_SECRET_ACCESS_KEY=minio123
      - AWS_REGION=us-east-1
      - DUCKDB_S3_ENDPOINT=http://minio:9000
      - DUCKDB_S3_URL_STYLE=path
      - DUCKDB_S3_USE_SSL=false
    volumes:
      - ./transform:/project/transform
      - ./observability:/project/observability
      - ./samples:/project/samples
  ingestion_api:
    build: {context: ., dockerfile: docker/services/Dockerfile}
    environment:
      - KAFKA_BROKERS=redpanda:9092
      - KAFKA_TOPIC=txn.raw.v1
      - REDIS_URL=redis://redis:6379/0
      - JWT_AUDIENCE=ingestion
      - JWT_ISSUER=local
      - JWT_PUBLIC_KEY_BASE64=
    ports: ["8000:8000","8090:8090"]
    depends_on: [redpanda, redis]
    volumes: ["./ingestion/api:/srv/app"]
  great_expectations:    
    image: python:3.11-slim
    environment:
      - AWS_ACCESS_KEY_ID=minio
      - AWS_SECRET_ACCESS_KEY=minio123
      - AWS_REGION=us-east-1
      - DUCKDB_S3_ENDPOINT=http://minio:9000
      - DUCKDB_S3_URL_STYLE=path
      - DUCKDB_S3_USE_SSL=false
    volumes:
      - ./observability/great_expectations:/project/observability/great_expectations
      - ./observability:/project/observability
      - ./transform:/project/transform
    working_dir: /project
    entrypoint: ["bash","-lc","pip install --no-cache-dir great_expectations boto3 s3fs pandas pyarrow && tail -f /dev/null"]
    prometheus:
      image: prom/prometheus:v2.53.0
      container_name: prometheus
      volumes:
        - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      ports: ["9090:9090"]
      depends_on:
        - minio

    grafana:
      image: grafana/grafana:10.4.5
      container_name: grafana
      environment:
        - GF_SECURITY_ADMIN_PASSWORD=admin
      volumes:
        - ./observability/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
        - ./observability/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
        - ./observability/grafana/dashboards:/etc/grafana/dashboards:ro
      ports: ["3000:3000"]
      depends_on:
        - prometheus

    features_api:
      image: python:3.11-slim
      container_name: features_api
      working_dir: /project/feature_store/api
      environment:
        - REDIS_URL=redis://redis:6379/0
      volumes:
        - ./feature_store:/project/feature_store
      command: bash -lc "pip install --no-cache-dir fastapi uvicorn redis && uvicorn main:app --host 0.0.0.0 --port 8090"
      ports:
        - "8090:8090"
      depends_on:
        - redis

  metabase:
    image: metabase/metabase:v0.49.13
    ports: ["3000:3000"]
volumes:
  minio: {}
